<script>

/**
 * Module to ajaxify all add to cart forms on the page.
 *
 * Copyright (c) 2014 Caroline Schnapp (11heavens.com)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
Shopify.AjaxifyCart = (function($) {

  var _config = {
    addedToCartBtnLabel: '{{ 'products.product.thank_you' | t | json }}',
    addingToCartBtnLabel: '{{ 'products.product.adding' | t | json }}',
    soldOutBtnLabel: '{{ 'products.product.sold_out' | t | json }}',
    howLongTillBtnReturnsToNormal: 1000, // in milliseconds.
    cartCountSelector: '.CartCount',
    cartTotalSelector: '.CartCost',
    feedbackPosition: 'aboveForm', // 'aboveForm' for top of add to cart form, 'belowForm' for below the add to cart form, and 'nextButton' for next to add to cart button.
    shopifyAjaxAddURL: '/cart/add.js',
    shopifyAjaxCartURL: '/cart.js'
  };

  var _showFeedback = function(success, html, addToCartForm) {
    $('.ajaxified-cart-feedback').remove();
    var feedback = '<p class="ajaxified-cart-feedback ' + success + '">' + html + '</p>';
    switch (_config.feedbackPosition) {
      case 'aboveForm':
        addToCartForm.find('.product-add').before(feedback);
        break;
      case 'belowForm':
        addToCartForm.find('.product-add').after(feedback);
        break;
      case 'nextButton':
      default:
        addToCartForm.find('input[type="submit"]').after(feedback);
        break;
    }
    $('.ajaxified-cart-feedback').slideDown();
  };

  var _init = function() {
    $(document).ready(function() {
      $('form[action="/cart/add"]').submit(function(e) {
        e.preventDefault();
        var addToCartForm = $(this);
        // Disable add to cart button.
        var addToCartBtn = addToCartForm.find('input[type="submit"]');
        addToCartBtn.attr('data-label', addToCartBtn.val());
        addToCartBtn.val(_config.addingToCartBtnLabel).addClass('disabled').attr('disabled', 'disabled');
        // Add to cart.
        $.ajax({
          url: _config.shopifyAjaxAddURL,
          dataType: 'json',
          type: 'post',
          data: addToCartForm.serialize(),
          success: function(itemData) {
            // Re-enable add to cart button.
            addToCartBtn.addClass('inverted').val(_config.addedToCartBtnLabel);
            _showFeedback('success','<i class="la la-check"></i> {{ 'products.product.added' | t }} <a href="{{ routes.cart_url }}">{{ 'products.product.view_cart' | t }}</a> {{ 'products.product.or' | t }} <a href="/collections/all">{{ 'products.product.continue' | t }}</a>.',addToCartForm);
            window.setTimeout(function(){
              addToCartBtn.removeAttr('disabled').removeClass('disabled').removeClass('inverted').val(addToCartBtn.attr('data-label'));
            }, _config.howLongTillBtnReturnsToNormal);
            // Update cart count and show cart link.
            $.getJSON(_config.shopifyAjaxCartURL, function(cart) {
              if (_config.cartCountSelector && $(_config.cartCountSelector).size()) {
                var value = $(_config.cartCountSelector).html();
                $(_config.cartCountSelector).html(value.replace(/[0-9]+/,cart.item_count));
              }
              if (_config.cartTotalSelector && $(_config.cartTotalSelector).size()) {
                if (typeof Currency !== 'undefined' && typeof Currency.money_format !== 'undefined') {
                  var newCurrency = '';
                  if ($('[name="currencies"]').size()) {
                    newCurrency = $('[name="currencies"]').val();
                  }
                  else if ($('#currencies span.selected').size()) {
                    newCurrency = $('#currencies span.selected').attr('data-currency');
                  }
                  if (newCurrency) {
                    $(_config.cartTotalSelector).html('<span class=money>' + Shopify.formatMoney(Currency.convert(cart.total_price, "{{ cart.currency.iso_code }}", newCurrency), Currency.money_format[newCurrency]) + '</span>');
                  }
                  else {
                    $(_config.cartTotalSelector).html(Shopify.formatMoney(cart.total_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"));
                  }
                }
                else {
                  $(_config.cartTotalSelector).html(Shopify.formatMoney(cart.total_price, "{{ shop.money_format | remove: "'" | remove: '"' }}"));
                }
              };
            });
          },
          error: function(XMLHttpRequest) {
            var response = eval('(' + XMLHttpRequest.responseText + ')');
            response = response.description;
            if (response.slice(0,4) === 'All ') {
              _showFeedback('error', response.replace('All 1 ', 'All '), addToCartForm);
              addToCartBtn.removeAttr('disabled').val(_config.soldOutBtnLabel).attr('disabled','disabled');
            }
            else {
              _showFeedback('error', '<i class="la la-warning"></i> ' + response, addToCartForm);
              addToCartBtn.removeAttr('disabled').removeClass('disabled').removeClass('inverted').val(addToCartBtn.attr('data-label'));
            }
          }
        });
        return false;
      });
    });
  };

  return {
    init: function(params) {
        // Configuration
        params = params || {};
        // Merging with defaults.
        $.extend(_config, params);
        // Action
        $(function() {
          _init();
        });
    },
    getConfig: function() {
      return _config;
    }
  }
})(jQuery);

Shopify.AjaxifyCart.init();

</script>
