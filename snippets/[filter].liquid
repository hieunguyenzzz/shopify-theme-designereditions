{%- comment -%}
  <!-- sort_options -->
  <!-- search -->
  <!-- filters -->
  <!-- url -->
  <!-- sort_by -->
{%- endcomment -%}
{% assign filterBarId = 'my-drawer' %}


<style>
    #filter-drawer .tw-collapse-title{
        padding: 1rem 2rem 1rem 0rem;
    }
    #filter-drawer .tw-collapse:not(.tw-collapse-close) input[type=checkbox]:focus~.tw-collapse-title,
    #filter-drawer .tw-collapse:focus:not(.tw-collapse-close) .tw-collapse-title,
    #filter-drawer .tw-collapse:focus:not(.tw-collapse-close) .tw-collapse-content,
    #filter-drawer .tw-collapse:not(.tw-collapse-close) input[type=checkbox]:checked~.tw-collapse-content {
        background: none;
    }
    #filter-drawer .tw-collapse:not(.tw-collapse-close) input[type=checkbox]:checked~.tw-collapse-title{
        background: none;
    }
    #filter-drawer .tw-collapse-arrow .tw-collapse-title:after{
        height: 0.4rem;
        width: 0.4rem;
        top: 1.5rem;
        right: 0.4rem;
        box-shadow: 1px 1px;
    }
    #filter-drawer .tw-collapse-content{
        padding-left: 0;
        padding-right: 0;
    }
</style>

<style>
    
.multi-range {
  width: 100%;
  height: 20px;
  position: relative;
  margin-bottom: 0.3em;
}
.multi-range__track {
  height: 10px;
  width: 100%;
  background: transparent;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 0;
  overflow: hidden ;
}
.multi-range__track-bg {
  height: 100%;
  width: 100%;
  background: #ccc;
  position: absolute;
  top: 0;
  left: -2.5%;
}
.multi-range__fill {
  height: 100%;
  width: 100%;
  background: #343434;
  position: absolute;
  top: 0;
  left: 0;
  transform: translateX(10px);
}
.multi-range__handle {

  background: #343434;
  position: absolute;
  top: 50%;
  cursor: -webkit-grab;
  cursor: grab;
  height: 20px;
  width: 20px;
  transform: translateY(-50%) translateX(10px);
  border : 1px solid white;
  touch-action: none;
  
}
.multi-range__handle:first-child{
    transform: translateY(-50%) translateX(-10px);
}
.multi-range__handle:focus:first-child {
  box-shadow: 0px 0px 1px 3px #00000029;
}
.multi-range__handle:focus:last-child {
  box-shadow: 0px 0px 1px 3px #00000029;
}
.multi-range__ticks {
  height: 100%;
  width: 100%;
  background: transparent;
  position: absolute;
  top: 0;
  left: 2.5%;
  display: flex;
  justify-content: space-between;
}
.multi-range__tick {
  width: 2px;
  height: 100%;
  background: #fff;
}
.multi-range__labels {
  font-size: 14px;
  position: absolute;
  left: 2.5%;
  min-width: 100%;
  overflow: visible;
  top: calc(100% + 0.5em);
}
.multi-range__labels > .label {
  position: absolute;
  display: none;
}
@media screen and (max-width: 709px) {
  .multi-range__labels > .label:nth-child(4n + 1) {
    display: block;
  }
}
@media screen and (min-width: 710px) {
  .multi-range__labels > .label:nth-child(odd) {
    display: block;
  }
}
@media screen and (min-width: 1560px) {
  .multi-range__labels > .label {
    display: block;
  }
}
 .multi-range__labels > .label  {
  transform: translateX(-50%);
}
.multi-range__ticks,.multi-range__labels {
  display: none;
}
</style>
{% assign sort_by = sort_by %}
{% assign url = request.path | append : '?' %}
{% if search %}
    {% if search.terms != blank %}
        {% assign url = url | append :'q' | append :'=' | append :search.terms | append :'&' %}
    {% endif %}
{% endif %}

{% assign urlWithoutFilter = url %}

{% for filter in filters %}
    {% if filter.active_values.size %}
        {% assign active_values = filter.active_values | map:'value' | join:',' %}
        {% if active_values != blank %}
            {% assign url = url | append :filter.param_name | append :'=' | append :active_values  | append :'&'  %}
        {% endif %}
    {% endif %}
{% endfor %}

{% assign showclearBtn = false %}
{% assign filterItemCount = 0 %}
{% assign sortByName = 'Featured' %}
{% for option in sort_options %}
    {% if option.value == sort_by %}
        {% assign sortByName = option.name %}
        {% else %}
    {% endif %}
{% endfor %}
{% capture filterItems %}
    {%- for filter in filters -%}
        {%- if filter.type == "price_range" -%}
            {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                <a class="active-filters__remove-filter tw-btn tw-btn-xs !tw-text-white" href="{{ filter.url_to_remove }}">
                    {%- assign min_value = filter.min_value.value | default: 0 -%}
                    {%- assign max_value = filter.max_value.value | default: filter.range_max -%}
                    {{ min_value | money }}
                    -
                    {{ max_value | money }}
                    <svg class="tw-w-3 tw-h-3 tw-ml-1" fill="none" height="24" shape-rendering="geometricPrecision" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor" viewbox="0 0 24 24" width="24">
                        <path d="M18 6L6 18"></path>
                        <path d="M6 6l12 12"></path>
                    </svg>
                </a>
                {% assign showclearBtn = true %}
                {% assign filterItemCount = filterItemCount | plus: 1 %}
            {%- endif -%}
        {%- else -%}
            {%- for filter_value in filter.active_values -%}
                {% if filter.param_name contains '.option.' %}
                    {% assign trans = true %}
                {% endif %}
                {% assign valuestring = filter_value.label %}
                {% if trans %}
                    {% assign handlizedlabel = filter_value.label | handleize %}
                    {% assign valuestring = 'strings.product_options.' | append: handlizedlabel | t %}
                {% endif %}
                {% if filter.param_name == 'filter.v.availability' and filter_value.value == "1" %}
                    {% assign valuestring = 'strings.general.availabilityfilter' | t %}
                {% endif %}
                <a class="active-filters__remove-filter tw-btn tw-btn-xs !tw-text-white" href="{{ filter_value.url_to_remove }}">
                    {{ valuestring }}
                    <svg class="tw-w-3 tw-h-3 tw-ml-1" fill="none" height="24" shape-rendering="geometricPrecision" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" stroke="currentColor" viewbox="0 0 24 24" width="24">
                        <path d="M18 6L6 18"></path>
                        <path d="M6 6l12 12"></path>
                    </svg>
                </a>
                {% assign filterItemCount = filterItemCount | plus: 1 %}
                {% assign showclearBtn = true %}
                {% assign trans = false %}
            {%- endfor -%}
        {%- endif -%}
    {%- endfor -%}
{% endcapture %}
<div class="tw-py-6">
    <div class="tw-w-full tw-flex tw-gap-3">
        <div class="tw-flex-1 lg:tw-flex tw-gap-3 tw-flex-wrap tw-hidden ">
            {%- for filter in collection.filters -%}

                {% assign trans = false %}
                {% if forloop.index > 3 %}
                    {% continue %}
                {% endif %}
                {% if filter.param_name contains '.option.' %}
                    {% assign trans = true %}
                {% endif %}
                {% assign optionstring = filter.label %}
                {% if trans %}
                    {% assign handlizedfilterlabel = filter.label | handleize %}
                    {% assign optionstring = 'strings.product_options.' | append: handlizedfilterlabel | t %}
                {% endif %}

                <filter-opener>
                    <label class="tw-bg-gray-100 tw-cursor-pointer tw-items-center tw-flex tw-h-12 tw-p-4 tw-rounded-l-full tw-rounded-r-full hover:tw-bg-gray-200" for="filter-form-value-{{filter.label | handleize}}">{{optionstring}}</label>
                </filter-opener>
            {% endfor %}
            <label class="tw-bg-gray-100 tw-gap-2 tw-cursor-pointer tw-items-center tw-flex tw-h-12 tw-p-4 tw-rounded-l-full tw-rounded-r-full hover:tw-bg-gray-200" for="my-drawer">{{ 'strings.general.more-filters' | t }}
                <svg class="" fill="currentColor" height="1em" stroke-width="0" stroke="currentColor" viewbox="0 0 16 16" width="1em" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" fill-rule="evenodd"></path>
                </svg>
            </label>
        </div>
        <div class="tw-flex-1 tw-flex tw-gap-3 tw-flex-wrap lg:tw-hidden">
            <label class="tw-bg-gray-100 tw-gap-2 tw-cursor-pointer tw-items-center tw-flex tw-h-12 tw-p-4 tw-rounded-l-full tw-rounded-r-full hover:tw-bg-gray-200" for="my-drawer">{{ 'strings.general.more-filters' | t }}
                <svg class="" fill="currentColor" height="1em" stroke-width="0" stroke="currentColor" viewbox="0 0 16 16" width="1em" xmlns="http://www.w3.org/2000/svg">
                    <path d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" fill-rule="evenodd"></path>
                </svg>
            </label>
        </div>
        <div>
            <div class="tw-dropdown tw-dropdown-end">
                <div class="tw-bg-gray-100 tw-cursor-pointer tw-items-center tw-flex tw-h-12 tw-p-4 tw-rounded-l-full tw-rounded-r-full hover:tw-bg-gray-200" tabindex="0">{{'collections.sorting.title' | t}}:
                    {{sortByName}}</div>
                <ul class="tw-p-2 tw-shadow-lg tw-menu tw-compact tw-dropdown-content tw-bg-base-100 tw-rounded-box tw-w-52" tabindex="0">
                    {% for option in sort_options %}
                        <li>
                            <a href="{{url| sort_by : option.value}}">{{ option.name }}</a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>
    </div>
    {% if showclearBtn %}
        <div class="tw-flex tw-flex-wrap tw-gap-3 tw-py-2 tw-active-filters">
            {{filterItems}}
            <a href="{{ urlWithoutFilter| sort_by : sort_by }}" class="tw-btn tw-btn-xs tw-btn-outline tw-active-filters__clear">{{'strings.general.clear-all' | t}}</a>
        </div>
    {% endif %}
</div>

<div class=" tw-drawer t tw-fixed tw-inset-0 tw-w-full tw-h-full tw-z-50 tw-isolate tw-pointer-events-none" id="filter-drawer">
    <input class="tw-drawer-toggle" id="my-drawer" type="checkbox">
    <div class="tw-drawer-side tw-pointer-events-none">
        <label class="tw-drawer-overlay tw-pointer-events-auto  !tw-m-0" for="my-drawer"></label>
        <div class="tw-menu tw-text-left tw-pointer-events-auto  tw-p-4 lg:tw-px-10 lg:tw-py-6 tw-overflow-hidden tw-shadow-lg tw-max-w-[80%] tw-w-[428px] tw-bg-base-100 tw-text-base-content tw-flex tw-flex-col" tabindex="-1">
            <div class="tw-flex tw-min-h-16 tw-items-center ">
                <div class="tw-text-3xl tw-font-bold tw-py-3 tw-flex-1">
                    {{ 'strings.general.filter-products' | t }}
                </div>
                <label class="tw-text-2xl tw-flex-shrink-0 tw-py-3 " for="my-drawer">
                    <svg fill="currentColor" height="1em" stroke-width="0" stroke="currentColor" viewbox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3,3 L21,21 M3,21 L21,3" fill="none" stroke-width="2" stroke="#000"></path>
                    </svg>
                </label>
            </div>
            <form class="tw-flex-1 filter-form tw-divide-y tw-flex tw-flex-col tw-overflow-hidden">
                <div class="tw-flex-1 tw-overflow-y-auto tw-overscroll-contain tw-divide-y tw-pb-12 ">
                    {%- for filter in collection.filters -%}
                        {% assign trans = false %}
                        {%- case filter.type -%}
                            {%- when 'price_range' -%}
                                <div class="tw-collapse tw-w-full tw-collapse-arrow">
                                    <input checked id="filter-form-value-{{filter.label | handleize}}" name="filter-form-value" type="checkbox">
                                    <div class="tw-collapse-title tw-flex tw-gap-2 tw-justify-between tw-font-semibold ">
                                        <span class="">{{ filter.label }}
                                            ({{ cart.currency.iso_code }})</span>
                                        <div class="tw-truncate tw-text-gray-400 tw-flex-1 tw-text-right empty:tw-hidden tw-w-0">
                                            {%- assign min_value = filter.min_value.value | default: 0 -%}
                                            {%- assign max_value = filter.max_value.value | default: filter.range_max -%}
                                            {{ min_value | money }}
                                            -
                                            {{ max_value | money }}
                                        </div>
                                    </div>
                                    <div class="tw-collapse-content">
                                        <div class="tw-flex tw-space-x-3 tw-py-3 tw-pr-6">
                                            <div class="tw-flex tw-items-baseline tw-flex-1 tw-space-x-3 filter-group-display__price-range-from">
                                                <label  class="tw-text-xs" for="Filter-{{ filter.min_value.param_name }}">{{'strings.general.from' | t}}</label>
                                                <input  class="tw-flex-1 tw-input-disabled tw-w-0 tw-input tw-input-bordered tw-input-sm" name="{{ filter.min_value.param_name }}" id="Filter-{{ filter.min_value.param_name }}" {% if filter.min_value.value -%} value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}" {%- endif %} placeholder="0" min="0" max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">
                                            </div>
                                            <div class="tw-flex tw-items-baseline tw-flex-1 tw-space-x-3 filter-group-display__price-range-to">
                                                <label class="tw-text-xs" for="Filter-{{ filter.max_value.param_name }}">{{'strings.general.to' | t}}</label>
                                                <input  class="tw-flex-1 tw-input-disabled tw-w-0 tw-input tw-input-bordered tw-input-sm" name="{{ filter.max_value.param_name }}" id="Filter-{{ filter.max_value.param_name }}" {% if filter.max_value.value -%} value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}" {%- endif %} placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}" min="0" max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">
                                            </div>
                                        </div>
                                        <div class="tw-px-4">
                                            <div>
                                                <div class="multi-range" data-min-value="0" data-max-value="{{filter.range_max | money_without_currency | replace: ',', ''}}"></div>
                                            </div>
                                        </div>
                                        <div>{{'strings.general.max' |t}}:
                                            {{ filter.range_max | money_with_currency  }}</div>
                                    </div>
                                   
                                </div>
                            {%- when 'list' -%}
                                {% if filter.param_name contains '.option.' %}
                                    {% assign trans = true %}
                                {% endif %}
                                <div class="tw-collapse tw-w-full tw-collapse-arrow focus-within:tw-bg-gray-100">
                                    <input name="filter-form-value" data-param-name="{{filter.param_name}}" id="filter-form-value-{{filter.label | handleize}}" type="checkbox">
                                    <div class="tw-collapse-title tw-flex tw-gap-2 tw-justify-between tw-font-semibold ">
                                        <span class="">
                                            {% if trans %}
                                                {% assign handlizedfilterlabel = filter.label | handleize %}
                                                {% assign optionstring = 'strings.product_options.' | append: handlizedfilterlabel | t %}
                                                {{optionstring}}
                                            {% else %}
                                                {{filter.label}}
                                            {% endif %}

                                        </span>
                                        <div class="tw-truncate tw-text-gray-400 tw-flex-1 tw-text-right empty:tw-hidden tw-w-0">
                                            {% if trans %}
                                                {% for value in filter.active_values  %}
                                                    {{value.value}}
                                                    {% if forloop.index != filter.active_values.size  %}
                                                        {{', '}}
                                                    {% endif %}
                                                {% endfor %}
                                            {% else %}
                                                {{filter.values | where: "active", true | map: 'label' | join: ', '}}
                                            {% endif %}

                                        </div>
                                    </div>
                                    <div class="tw-collapse-content">
                                        {%- for filter_value in filter.values -%}
                                            <li class="filter-group-display__list-item {% if filter_value.count == 0 and filter_value.active == false -%} tw-opacity-50 {%- endif %}">
                                                <label class="tw-flex tw-gap-2 tw-py-1 tw-items-center" for="Filter-{{ filter.param_name }}-{{ forloop.index }}">
                                                    <input class="tw-checkbox tw-checkbox-sm !tw-block" type="checkbox" name="{{ filter_value.param_name }}" value="{{ filter_value.value }}" id="Filter-{{ filter_value.label | escape }}-{{ forloop.index }}" {% if filter_value.active -%} checked {%- endif %} {% if filter_value.count == 0 and filter_value.active == false -%} disabled {%- endif %}>
                                                    {% if trans %}
                                                        {% assign handlized = filter_value.label | handleize %}
                                                        {% assign optionstring = 'strings.product_options.' | append: handlized | t %}

                                                        {{optionstring}}
                                                    {% else %}
                                                        {% if filter.param_name == 'filter.v.availability' and filter_value.value == "1" %}
                                                            {{'strings.general.availabilityfilter' | t}}
                                                        {% else %}
                                                            {{ filter_value.label }}
                                                        {% endif %}

                                                    {% endif %}

                                                </label>
                                            </li>
                                        {%- endfor -%}
                                    </div>
                                </div>


                            {% else %}

                        {% endcase %}

                    {%- endfor -%}
                </div>
                <div class="active-filters tw-flex tw-gap-3">
                    <a href="{{ collection.url }}?sort_by={{ collection.sort_by }}" class="tw-btn tw-btn-outline tw-rounded-none tw-flex tw-items-center">{{'strings.general.clear-all' | t}}</a>
                    <input class="btn " type="submit" value="{{'strings.general.apply' | t}}">

                </div>
            </form>

        </div>
    </div>
</div>
<script>
    class FilterOpener extends HTMLElement {
        constructor() {
            super();
            this.querySelector("label").addEventListener("click", (event) => {
                event.preventDefault();
                document.querySelector("#" + event.target.htmlFor).checked = true
                document.querySelector("#" + {{ filterBarId|json }}).checked = true
                document.querySelector("#" + event.target.htmlFor).focus()
            });
        }
    }

    customElements.define("filter-opener", FilterOpener);

    /**
 * MultiRangeSlider
 * @param {HTMLElement} elmement - the dom element that will be made the slider
 * @param {object} settings 
 * @param {function} [getFormattedValue] - a function that will convert the label values
 */
function MultiRangeSlider(element, settings, getFormattedValue = (value) => value) {
  const slider = element;
  const DOM = {};
  let steps = [];
  let dragging = false;
  let currentHandle = null;
  const getHandleOffset = () => DOM.handles[0].offsetWidth / 2;
  const getTrackWidth = () => DOM.track.offsetWidth;
  const getFocusedHandle = () => DOM.handles.find(handle => document.activeElement === handle);

  const values = settings.values||{
    start: settings.start,
    end: settings.end
  };

  function getSteps(sliderWidth, stepLen, handleOffset) {
    const steps = [];
    for (let i = 0; i <= stepLen; i++) {
      const stepX = i * (sliderWidth * 0.90 / stepLen) + handleOffset;
      const stepPercent = (i * (90 / stepLen)).toFixed(2);
      const value = i * settings.increment + settings.start;
      steps.push({
        value,
        stepX,
        stepPercent
      });
    }
    console.log({sliderWidth, stepLen, handleOffset})
    return steps;
  }

  const getStepLen = () => (settings.end - settings.start) / settings.increment;
  
  const startDrag = (event) => {
    currentHandle = event.target;
    dragging = true;
  };
  const stopDrag = () => dragging = false;

  function createLabels(container, settings) {
    const labels = document.createElement("div");
    labels.classList.add("multi-range__labels");
    steps = getSteps(slider.offsetWidth, getStepLen(), getHandleOffset());
    steps.forEach(step => {
      const label = document.createElement("label");
      label.classList.add("label");
      label.textContent = getFormattedValue(step.value);
      label.style.left = `${step.stepPercent}%`;
      labels.appendChild(label);
      const tick = document.createElement("div");
      tick.classList.add("multi-range__tick");
      container.appendChild(tick);
    });
    
    return labels;
  }
  
  function addElementsToDOM() {
    const track = document.createElement("div");
    track.classList.add("multi-range__track");
    DOM.track = track;
    const trackBg = document.createElement("div");
    trackBg.classList.add("multi-range__track-bg");
    const trackFill = document.createElement("div");
    trackFill.classList.add("multi-range__fill");
    DOM.trackFill = trackFill;
    const ticksContainer = document.createElement("div");
    ticksContainer.classList.add("multi-range__ticks");
    let handleContainer = document.createElement("div");
    handleContainer.classList.add("multi-range__handles");
    const leftHandle = document.createElement("div");
    leftHandle.classList.add("multi-range__handle");
    leftHandle.setAttribute("data-handle-position", "start");
    leftHandle.setAttribute("tabindex", 0);
    const rightHandle = document.createElement("div");
    rightHandle.classList.add("multi-range__handle");
    rightHandle.setAttribute("data-handle-position", "end");
    rightHandle.setAttribute("tabindex", 0);
    handleContainer.appendChild(leftHandle);
    handleContainer.appendChild(rightHandle);
    DOM.handles = [leftHandle, rightHandle];
    track.appendChild(trackBg);
    track.appendChild(trackFill);
    slider.appendChild(track);
    slider.appendChild(handleContainer);
    const labels = createLabels(ticksContainer, settings);
    slider.appendChild(labels);
    track.appendChild(ticksContainer);
  }
  
  function init() {
    addElementsToDOM();
    DOM.handles.forEach(handle => {
      handle.addEventListener("mousedown", startDrag);
      handle.addEventListener("touchstart", startDrag);
    });
    window.addEventListener("mouseup", stopDrag);
    window.addEventListener("touchend", stopDrag);
    window.addEventListener("resize", onWindowResize);
    window.addEventListener("mousemove", onHandleMove);
    window.addEventListener("touchmove", onHandleMove);
    window.addEventListener("keydown", onKeyDown);
  }

  function dispatchEvent() {
    let event;
    if (window.CustomEvent) {
      event = new CustomEvent("slider-change", {
        detail: { start: values.start, end: values.end }
      });
    } else {
      event = document.createEvent("CustomEvent");
      event.initCustomEvent("slider-change", true, true, {
        start: values.start,
        end: values.end
      });
    }
    slider.dispatchEvent(event);
  }

  function getClosestStep(newX, handlePosition) {
    const isStart = handlePosition === "start";
    const otherStep = getStep(values[isStart ? "end" : "start"]);
    let closestDistance = Infinity;
    let indexOfClosest = null;
    for (let i = 0; i < steps.length; i++) {
      if (
        (isStart && steps[i].stepX < otherStep.stepX) ||
        (!isStart && steps[i].stepX > otherStep.stepX)
      ) {
        const distance = Math.abs(steps[i].stepX - newX);
        if (distance < closestDistance) {
          closestDistance = distance;
          indexOfClosest = i;
        }
      }
    }
    console.log({newX, handlePosition ,steps})
    return steps[indexOfClosest];
  }

  function updateHandles() {
    DOM.handles.forEach(function(handle, index) {
      const step = index === 0 ? getStep(values.start) : getStep(values.end);
      handle.style.left = `${step.stepPercent}%`;
    });
  }

  const getStep = value => steps.find(step => step.value === value);

  function updateFill() {
    const trackWidth = getTrackWidth();
    const startStep = getStep(values.start);
    const endStep = getStep(values.end);
    const newWidth =
      trackWidth - (startStep.stepX + (trackWidth  - endStep.stepX)) ;
    const percentage = (newWidth ) / trackWidth * 100;
    DOM.trackFill.style.width = `${percentage }%`;
    DOM.trackFill.style.left = `${startStep.stepPercent }%`;
  }

  function render() {
    updateFill();
    updateHandles();
  }

  function onHandleMove(event) {
    event.preventDefault();
    if (!dragging) return;
    const handleOffset = getHandleOffset();
    const clientX = event.clientX || event.touches[0].clientX;
    window.requestAnimationFrame(() => {
      if (!dragging) return;
      const mouseX = clientX - slider.offsetLeft;
      const handlePosition = currentHandle.dataset.handlePosition ;
      let newX = Math.max(
        handleOffset,
        Math.min(mouseX, slider.offsetWidth )
      );
      const currentStep = getClosestStep(newX, handlePosition);
      values[handlePosition] = currentStep.value;
      render();
      dispatchEvent();
    });
  }
  
  function onKeyDown(e) {
    const keyCode = e.keyCode;
    const handle = getFocusedHandle();
    const keys = {
      "37": "left",
      "39": "right"
    };
    const arrowKey = keys[keyCode];
    if(!handle || !arrowKey) return;
    const handlePosition = handle.dataset.handlePosition;
    const stepIncrement = arrowKey === "left" ? -1 : 1;
    const stepIndex = steps.findIndex(step => step.value === values[handlePosition]);
    const newIndex = stepIndex + stepIncrement;
    if(newIndex < 0 || newIndex >= steps.length) return;
    values[handlePosition] = steps[newIndex].value;
    render();
    dispatchEvent();
  }
  
  function onWindowResize() {
    steps = getSteps(slider.offsetWidth, getStepLen(), getHandleOffset());
    render();
  }

  function update(newValues) {
    values.start = newValues.start;
    values.end = newValues.end;
    render();
  }
  
  function on(eventType, fn) {
    slider.addEventListener(eventType, fn);
  }
  
  function off(eventType, fn) {
    slider.removeEventListener(eventType, fn);
  }
  
  function destroy(removeElement) {
    DOM.handles.forEach(handle => {
      handle.removeEventListener("mousedown", startDrag);
      handle.removeEventListener("touchstart", startDrag);
    });
    window.removeEventListener("mouseup", stopDrag);
    window.removeEventListener("touchend", stopDrag);
    window.removeEventListener("resize", onWindowResize);
    window.removeEventListener("mousemove", onHandleMove);
    window.removeEventListener("touchmove", onHandleMove);
    window.removeEventListener("keydown", onKeyDown);
    if(removeElement) slider.parentNode.removeChild(slider);
  }

  init();

  render();

  return {
    on,
    off,
    update,
    destroy
  };
}

/**
  * Slider settings
**/
const settings = {
  start: Number(document.querySelector("[data-min-value]").dataset.minValue),
  end: Number(document.querySelector("[data-max-value]").dataset.maxValue),
  values:{
    start: Number(document.querySelector("[name='filter.v.price.gte']").value),
    end: Number(document.querySelector("[name='filter.v.price.lte']").value),
  },
  increment: 1
};

/**
 * A function such as this one can be passed into
 * MultiRangeSlider to transform the labels 
 * based on their values.
 */
function getFormattedValue(value) {
  return value;
}


/**
 * Initialize the slider
 */
var slider = MultiRangeSlider(
  document.querySelector(".multi-range"),
  settings, 
  getFormattedValue
);

/**
 * You can listen to the slider-change event
 * which fires every time a handle is moved.
 */
slider.on("slider-change", event => view.update(event.detail));

/**
 * Helper for updating the view when slider changes
 */
const view = {
  start: document.querySelector("[name='filter.v.price.gte']"),
  end: document.querySelector("[name='filter.v.price.lte']"),
  update: function(values) {
    for (let key in values) {
      this[key].value = getFormattedValue(values[key]);
    }
  }
};


</script>